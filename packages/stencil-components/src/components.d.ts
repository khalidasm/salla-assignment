/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { CartItemData } from "./components/cart-item/cart-item";
import { CartItemData as CartItemData1 } from "./components/cart-item/cart-item";
import { CouponData } from "./components/coupon/coupon";
import { ShippingOption } from "./components/shipping-view/shipping-view";
export { CartItemData } from "./components/cart-item/cart-item";
export { CartItemData as CartItemData1 } from "./components/cart-item/cart-item";
export { CouponData } from "./components/coupon/coupon";
export { ShippingOption } from "./components/shipping-view/shipping-view";
export namespace Components {
    interface AppComponent {
    }
    interface BreadcrumbsComponent {
        "items": string[];
    }
    interface ButtonComponent {
        "isDisabled"?: boolean;
        "isLoading"?: boolean;
        "showShimmer"?: boolean;
        "variant"?: "sm" | "normal" | "icon";
    }
    interface CartComponent {
        "isLoading": boolean;
        "items": CartItemData[];
    }
    interface CartItemComponent {
        "item": CartItemData1;
    }
    interface CartTotal {
        "isLoading": boolean;
        "showSimpleTotal": boolean;
    }
    interface CartViewComponent {
    }
    interface ConfirmationViewComponent {
    }
    interface ContainerComponent {
    }
    interface CouponComponent {
        "coupon": CouponData;
        "isLoading": boolean;
        "total": number;
    }
    interface CouponInput {
        "disabled": boolean;
        "isCouponApplied": boolean;
        "isLoading": boolean;
        "placeholder": string;
        "value": string;
    }
    interface ShimmerComponent {
        "height": string;
        "width": string;
    }
    interface ShippingListComponent {
        "isLoading": boolean;
        "shippingOptions": ShippingOption[];
    }
    interface ShippingViewComponent {
    }
    interface TitleComponent {
        "text": string;
    }
}
export interface BreadcrumbsComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBreadcrumbsComponentElement;
}
export interface ButtonComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLButtonComponentElement;
}
export interface CartViewComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCartViewComponentElement;
}
export interface CouponComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCouponComponentElement;
}
export interface CouponInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCouponInputElement;
}
export interface ShippingListComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLShippingListComponentElement;
}
export interface ShippingViewComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLShippingViewComponentElement;
}
declare global {
    interface HTMLAppComponentElement extends Components.AppComponent, HTMLStencilElement {
    }
    var HTMLAppComponentElement: {
        prototype: HTMLAppComponentElement;
        new (): HTMLAppComponentElement;
    };
    interface HTMLBreadcrumbsComponentElementEventMap {
        "routeClick": string;
    }
    interface HTMLBreadcrumbsComponentElement extends Components.BreadcrumbsComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLBreadcrumbsComponentElementEventMap>(type: K, listener: (this: HTMLBreadcrumbsComponentElement, ev: BreadcrumbsComponentCustomEvent<HTMLBreadcrumbsComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLBreadcrumbsComponentElementEventMap>(type: K, listener: (this: HTMLBreadcrumbsComponentElement, ev: BreadcrumbsComponentCustomEvent<HTMLBreadcrumbsComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLBreadcrumbsComponentElement: {
        prototype: HTMLBreadcrumbsComponentElement;
        new (): HTMLBreadcrumbsComponentElement;
    };
    interface HTMLButtonComponentElementEventMap {
        "onClick": void;
    }
    interface HTMLButtonComponentElement extends Components.ButtonComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLButtonComponentElementEventMap>(type: K, listener: (this: HTMLButtonComponentElement, ev: ButtonComponentCustomEvent<HTMLButtonComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLButtonComponentElementEventMap>(type: K, listener: (this: HTMLButtonComponentElement, ev: ButtonComponentCustomEvent<HTMLButtonComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLButtonComponentElement: {
        prototype: HTMLButtonComponentElement;
        new (): HTMLButtonComponentElement;
    };
    interface HTMLCartComponentElement extends Components.CartComponent, HTMLStencilElement {
    }
    var HTMLCartComponentElement: {
        prototype: HTMLCartComponentElement;
        new (): HTMLCartComponentElement;
    };
    interface HTMLCartItemComponentElement extends Components.CartItemComponent, HTMLStencilElement {
    }
    var HTMLCartItemComponentElement: {
        prototype: HTMLCartItemComponentElement;
        new (): HTMLCartItemComponentElement;
    };
    interface HTMLCartTotalElement extends Components.CartTotal, HTMLStencilElement {
    }
    var HTMLCartTotalElement: {
        prototype: HTMLCartTotalElement;
        new (): HTMLCartTotalElement;
    };
    interface HTMLCartViewComponentElementEventMap {
        "navigate": string;
    }
    interface HTMLCartViewComponentElement extends Components.CartViewComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCartViewComponentElementEventMap>(type: K, listener: (this: HTMLCartViewComponentElement, ev: CartViewComponentCustomEvent<HTMLCartViewComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCartViewComponentElementEventMap>(type: K, listener: (this: HTMLCartViewComponentElement, ev: CartViewComponentCustomEvent<HTMLCartViewComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCartViewComponentElement: {
        prototype: HTMLCartViewComponentElement;
        new (): HTMLCartViewComponentElement;
    };
    interface HTMLConfirmationViewComponentElement extends Components.ConfirmationViewComponent, HTMLStencilElement {
    }
    var HTMLConfirmationViewComponentElement: {
        prototype: HTMLConfirmationViewComponentElement;
        new (): HTMLConfirmationViewComponentElement;
    };
    interface HTMLContainerComponentElement extends Components.ContainerComponent, HTMLStencilElement {
    }
    var HTMLContainerComponentElement: {
        prototype: HTMLContainerComponentElement;
        new (): HTMLContainerComponentElement;
    };
    interface HTMLCouponComponentElementEventMap {
        "delete": string;
    }
    interface HTMLCouponComponentElement extends Components.CouponComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCouponComponentElementEventMap>(type: K, listener: (this: HTMLCouponComponentElement, ev: CouponComponentCustomEvent<HTMLCouponComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCouponComponentElementEventMap>(type: K, listener: (this: HTMLCouponComponentElement, ev: CouponComponentCustomEvent<HTMLCouponComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCouponComponentElement: {
        prototype: HTMLCouponComponentElement;
        new (): HTMLCouponComponentElement;
    };
    interface HTMLCouponInputElementEventMap {
        "applyCoupon": string;
        "inputChange": string;
    }
    interface HTMLCouponInputElement extends Components.CouponInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCouponInputElementEventMap>(type: K, listener: (this: HTMLCouponInputElement, ev: CouponInputCustomEvent<HTMLCouponInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCouponInputElementEventMap>(type: K, listener: (this: HTMLCouponInputElement, ev: CouponInputCustomEvent<HTMLCouponInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCouponInputElement: {
        prototype: HTMLCouponInputElement;
        new (): HTMLCouponInputElement;
    };
    interface HTMLShimmerComponentElement extends Components.ShimmerComponent, HTMLStencilElement {
    }
    var HTMLShimmerComponentElement: {
        prototype: HTMLShimmerComponentElement;
        new (): HTMLShimmerComponentElement;
    };
    interface HTMLShippingListComponentElementEventMap {
        "shippingOptionSelected": ShippingOption;
    }
    interface HTMLShippingListComponentElement extends Components.ShippingListComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLShippingListComponentElementEventMap>(type: K, listener: (this: HTMLShippingListComponentElement, ev: ShippingListComponentCustomEvent<HTMLShippingListComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLShippingListComponentElementEventMap>(type: K, listener: (this: HTMLShippingListComponentElement, ev: ShippingListComponentCustomEvent<HTMLShippingListComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLShippingListComponentElement: {
        prototype: HTMLShippingListComponentElement;
        new (): HTMLShippingListComponentElement;
    };
    interface HTMLShippingViewComponentElementEventMap {
        "navigate": string;
    }
    interface HTMLShippingViewComponentElement extends Components.ShippingViewComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLShippingViewComponentElementEventMap>(type: K, listener: (this: HTMLShippingViewComponentElement, ev: ShippingViewComponentCustomEvent<HTMLShippingViewComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLShippingViewComponentElementEventMap>(type: K, listener: (this: HTMLShippingViewComponentElement, ev: ShippingViewComponentCustomEvent<HTMLShippingViewComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLShippingViewComponentElement: {
        prototype: HTMLShippingViewComponentElement;
        new (): HTMLShippingViewComponentElement;
    };
    interface HTMLTitleComponentElement extends Components.TitleComponent, HTMLStencilElement {
    }
    var HTMLTitleComponentElement: {
        prototype: HTMLTitleComponentElement;
        new (): HTMLTitleComponentElement;
    };
    interface HTMLElementTagNameMap {
        "app-component": HTMLAppComponentElement;
        "breadcrumbs-component": HTMLBreadcrumbsComponentElement;
        "button-component": HTMLButtonComponentElement;
        "cart-component": HTMLCartComponentElement;
        "cart-item-component": HTMLCartItemComponentElement;
        "cart-total": HTMLCartTotalElement;
        "cart-view-component": HTMLCartViewComponentElement;
        "confirmation-view-component": HTMLConfirmationViewComponentElement;
        "container-component": HTMLContainerComponentElement;
        "coupon-component": HTMLCouponComponentElement;
        "coupon-input": HTMLCouponInputElement;
        "shimmer-component": HTMLShimmerComponentElement;
        "shipping-list-component": HTMLShippingListComponentElement;
        "shipping-view-component": HTMLShippingViewComponentElement;
        "title-component": HTMLTitleComponentElement;
    }
}
declare namespace LocalJSX {
    interface AppComponent {
    }
    interface BreadcrumbsComponent {
        "items"?: string[];
        "onRouteClick"?: (event: BreadcrumbsComponentCustomEvent<string>) => void;
    }
    interface ButtonComponent {
        "isDisabled"?: boolean;
        "isLoading"?: boolean;
        "onOnClick"?: (event: ButtonComponentCustomEvent<void>) => void;
        "showShimmer"?: boolean;
        "variant"?: "sm" | "normal" | "icon";
    }
    interface CartComponent {
        "isLoading"?: boolean;
        "items"?: CartItemData[];
    }
    interface CartItemComponent {
        "item"?: CartItemData1;
    }
    interface CartTotal {
        "isLoading"?: boolean;
        "showSimpleTotal"?: boolean;
    }
    interface CartViewComponent {
        "onNavigate"?: (event: CartViewComponentCustomEvent<string>) => void;
    }
    interface ConfirmationViewComponent {
    }
    interface ContainerComponent {
    }
    interface CouponComponent {
        "coupon"?: CouponData;
        "isLoading"?: boolean;
        "onDelete"?: (event: CouponComponentCustomEvent<string>) => void;
        "total"?: number;
    }
    interface CouponInput {
        "disabled"?: boolean;
        "isCouponApplied"?: boolean;
        "isLoading"?: boolean;
        "onApplyCoupon"?: (event: CouponInputCustomEvent<string>) => void;
        "onInputChange"?: (event: CouponInputCustomEvent<string>) => void;
        "placeholder"?: string;
        "value"?: string;
    }
    interface ShimmerComponent {
        "height"?: string;
        "width"?: string;
    }
    interface ShippingListComponent {
        "isLoading"?: boolean;
        "onShippingOptionSelected"?: (event: ShippingListComponentCustomEvent<ShippingOption>) => void;
        "shippingOptions"?: ShippingOption[];
    }
    interface ShippingViewComponent {
        "onNavigate"?: (event: ShippingViewComponentCustomEvent<string>) => void;
    }
    interface TitleComponent {
        "text"?: string;
    }
    interface IntrinsicElements {
        "app-component": AppComponent;
        "breadcrumbs-component": BreadcrumbsComponent;
        "button-component": ButtonComponent;
        "cart-component": CartComponent;
        "cart-item-component": CartItemComponent;
        "cart-total": CartTotal;
        "cart-view-component": CartViewComponent;
        "confirmation-view-component": ConfirmationViewComponent;
        "container-component": ContainerComponent;
        "coupon-component": CouponComponent;
        "coupon-input": CouponInput;
        "shimmer-component": ShimmerComponent;
        "shipping-list-component": ShippingListComponent;
        "shipping-view-component": ShippingViewComponent;
        "title-component": TitleComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-component": LocalJSX.AppComponent & JSXBase.HTMLAttributes<HTMLAppComponentElement>;
            "breadcrumbs-component": LocalJSX.BreadcrumbsComponent & JSXBase.HTMLAttributes<HTMLBreadcrumbsComponentElement>;
            "button-component": LocalJSX.ButtonComponent & JSXBase.HTMLAttributes<HTMLButtonComponentElement>;
            "cart-component": LocalJSX.CartComponent & JSXBase.HTMLAttributes<HTMLCartComponentElement>;
            "cart-item-component": LocalJSX.CartItemComponent & JSXBase.HTMLAttributes<HTMLCartItemComponentElement>;
            "cart-total": LocalJSX.CartTotal & JSXBase.HTMLAttributes<HTMLCartTotalElement>;
            "cart-view-component": LocalJSX.CartViewComponent & JSXBase.HTMLAttributes<HTMLCartViewComponentElement>;
            "confirmation-view-component": LocalJSX.ConfirmationViewComponent & JSXBase.HTMLAttributes<HTMLConfirmationViewComponentElement>;
            "container-component": LocalJSX.ContainerComponent & JSXBase.HTMLAttributes<HTMLContainerComponentElement>;
            "coupon-component": LocalJSX.CouponComponent & JSXBase.HTMLAttributes<HTMLCouponComponentElement>;
            "coupon-input": LocalJSX.CouponInput & JSXBase.HTMLAttributes<HTMLCouponInputElement>;
            "shimmer-component": LocalJSX.ShimmerComponent & JSXBase.HTMLAttributes<HTMLShimmerComponentElement>;
            "shipping-list-component": LocalJSX.ShippingListComponent & JSXBase.HTMLAttributes<HTMLShippingListComponentElement>;
            "shipping-view-component": LocalJSX.ShippingViewComponent & JSXBase.HTMLAttributes<HTMLShippingViewComponentElement>;
            "title-component": LocalJSX.TitleComponent & JSXBase.HTMLAttributes<HTMLTitleComponentElement>;
        }
    }
}
